generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String?              @unique
  emailVerified   DateTime?            @map("email_verified")
  image           String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  accounts        Account[]
  sessions        Session[]
  likedProfiles   UserLikedProfile[]
  likedComponents UserLikedComponent[]

  @@map("users")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.ObjectId
  access_token      String?  @db.ObjectId
  expires_at        Int?
  scope             String?
  id_token          String?  @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?  @db.ObjectId
  sessionToken String   @unique @map("session_token") @db.ObjectId
  accessToken  String?  @map("access_token") @db.ObjectId
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Profile
model Profile {
  id            String             @id @default(cuid()) @map("_id")
  name          String
  snapshootTime String
  imageUrl      String
  githubUrl     String
  likes         Int                @default(0)
  likedBy       UserLikedProfile[]

  @@map("profiles")
}

model UserLikedProfile {
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  profileId String  @map("_id")
  profile   Profile @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([profileId])
}

// Component
model Component {
  id        String                @id @default(cuid()) @map("_id")
  name      String
  github    String
  example   String
  likes     Int                   @default(0)
  categorys CategoryOfComponent[]
  likedBy   UserLikedComponent[]

  @@map("components")
}

model ComponentCategory {
  id         String                @id @default(cuid()) @map("_id")
  name       String
  components CategoryOfComponent[]

  @@map("componentCategorys")
}

model CategoryOfComponent {
  componentId String
  component   Component @relation(fields: [componentId], references: [id])

  categoryId String            @map("_id")
  category   ComponentCategory @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([categoryId])
}

model UserLikedComponent {
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  componentId String    @map("_id")
  component   Component @relation(fields: [componentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([componentId])
}
